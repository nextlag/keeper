// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/nextlag/keeper/internal/server/controller/http/v1 (interfaces: UseCase)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
	entity "github.com/nextlag/keeper/internal/entity"
)

// MockUseCase is a mock of UseCase interface.
type MockUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockUseCaseMockRecorder
}

// MockUseCaseMockRecorder is the mock recorder for MockUseCase.
type MockUseCaseMockRecorder struct {
	mock *MockUseCase
}

// NewMockUseCase creates a new mock instance.
func NewMockUseCase(ctrl *gomock.Controller) *MockUseCase {
	mock := &MockUseCase{ctrl: ctrl}
	mock.recorder = &MockUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUseCase) EXPECT() *MockUseCaseMockRecorder {
	return m.recorder
}

// AddLogin mocks base method.
func (m *MockUseCase) AddLogin(arg0 context.Context, arg1 *entity.Login, arg2 uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddLogin", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddLogin indicates an expected call of AddLogin.
func (mr *MockUseCaseMockRecorder) AddLogin(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddLogin", reflect.TypeOf((*MockUseCase)(nil).AddLogin), arg0, arg1, arg2)
}

// CheckAccessToken mocks base method.
func (m *MockUseCase) CheckAccessToken(arg0 context.Context, arg1 string) (entity.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckAccessToken", arg0, arg1)
	ret0, _ := ret[0].(entity.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckAccessToken indicates an expected call of CheckAccessToken.
func (mr *MockUseCaseMockRecorder) CheckAccessToken(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckAccessToken", reflect.TypeOf((*MockUseCase)(nil).CheckAccessToken), arg0, arg1)
}

// HealthCheck mocks base method.
func (m *MockUseCase) HealthCheck() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HealthCheck")
	ret0, _ := ret[0].(error)
	return ret0
}

// HealthCheck indicates an expected call of HealthCheck.
func (mr *MockUseCaseMockRecorder) HealthCheck() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HealthCheck", reflect.TypeOf((*MockUseCase)(nil).HealthCheck))
}

// SignUpUser mocks base method.
func (m *MockUseCase) SignUpUser(arg0 context.Context, arg1, arg2 string) (entity.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SignUpUser", arg0, arg1, arg2)
	ret0, _ := ret[0].(entity.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SignUpUser indicates an expected call of SignUpUser.
func (mr *MockUseCaseMockRecorder) SignUpUser(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SignUpUser", reflect.TypeOf((*MockUseCase)(nil).SignUpUser), arg0, arg1, arg2)
}
